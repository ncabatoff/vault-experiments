version: '2.0'

services:

  prometheus:
    image: prom/prometheus:v2.9.1
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    expose:
      - 9090
    ports:
      - 29090:9090

  consul-exporter:
    image: prom/consul-exporter:v0.4.0
    container_name: consul-exporter
    command:
      - '--consul.server=consul:8500'
    expose:
      - 9107

  grafana:
    image: grafana/grafana:6.1.3
    container_name: grafana
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/etc/grafana/dashboards
    environment:
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    expose:
      - 3000
    ports:
      - 3000:3000

  vault-transit:
    # We don't use consul in this container, but we need jq and we're already
    # using consul for the other vault containers anyway.
    image: consul
    container_name: vault-transit
    cap_add:
      - IPC_LOCK
    volumes:
      - ./vault:/vault
    entrypoint: /bin/sh
    command:
      - /vault/bin/run-transit-vault.sh
    expose:
      - 8210

  vault1:
    image: consul
    container_name: vault1
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_TOKEN=TOKEN-USE-UNSEAL-KEY
      - VAULT_API_ADDR=http://vault1:8200
    volumes:
      - ./vault:/vault
    entrypoint: /bin/sh
    command:
      - /vault/bin/run-flaky-vault.sh
      - vault token create -id=my-root-token; vault secrets enable -version=2 kv
    expose:
      - 8200

  vault2:
    image: consul
    container_name: vault2
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_TOKEN=TOKEN-USE-UNSEAL-KEY
      - VAULT_API_ADDR=http://vault2:8200
    volumes:
      - ./vault:/vault
    entrypoint: /bin/sh
    command:
      # Sleep a bit to allow vault1 to come up first and create a token with a known id.
      - -c
      - |
        sleep 20
        /vault/bin/run-flaky-vault.sh
    expose:
      - 8200

  postgres:
    image: postgres
    container_name: postgres
    volumes:
      - ./postgres:/docker-entrypoint-initdb.d
    expose:
      - 5432

  consul:
    image: consul
    container_name: consul
    command:
      - agent
      - -client=0.0.0.0
      - -server=true
      - -bootstrap-expect=1
      - -retry-join=consul
      - -data-dir=/consul/data
      - -config-dir=/consul/config
      - -ui=true
    expose:
      - 8300
      - 8500
      - 8600
      - 8600/udp
    ports:
      - 8501:8500

  client:
    image: consul
    container_name: client
    volumes:
      - ./client:/client
    entrypoint: /bin/sh
    environment:
      - CONSUL_HTTP_ADDR=consul:8500
      - VAULT_TOKEN=my-root-token
      - VAULT_ADDR=http://vault.service.dc1.consul:8200
    command:
      - -c
      - /client/client
    expose:
      - 8080





